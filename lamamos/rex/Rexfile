user "root";
password "test";
pass_auth;

#private_key "/root/.ssh/id_rsa";
#public_key "/root/.ssh/id_rsa.pub";
#key_auth;

#group martobre => "192.168.0.150", "192.168.0.151";
group martobre => "127.0.0.1";

use config;

require Rex::Logger;


require Service::ntp;
require Service::resolver;
require Service::apache;
require Service::apache::vhost;
require Service::apache::php;
require Service::lamadmin;
require Service::drbd;

require Service::pacemaker;
require Service::pacemaker::service;
require Service::pacemaker::primitive;
require Service::pacemaker::master;
require Service::pacemaker::property;
require Service::pacemaker::rsc_defaults;
require Service::pacemaker::group;
require Service::pacemaker::colocation;
require Service::pacemaker::order;
require Service::pacemaker::clone;
require Service::pacemaker::location;


task "configure", group => martobre, sub{

	if (my $err = ReadCfg('/etc/lamamos/lamamos.conf')) {
	    print(STDERR $err, "\n");
	    exit(1);
	}

	$CFG::hostName = getHostName();

	#now the config hash is in : $CFG::config{'varName'};
	#print $CFG::config{'ddName'}."\n";


  installBaseSysteme();

=pod

	#Install the NTP server
        Service::ntp::define();


	#define the DNS to use
        Service::resolver::define({

                'domain_name'        => 'testounet.fr',
                'search_path'        => ['testounet.fr'],
                'name_servers'       => ['208.67.222.222', '208.67.220.220'],
        });



	#install the web server
        Service::apache::define();

	#install php
	Service::apache::php::define();

	#create a vhost for the admin panel
        Service::apache::vhost::define({

		'file_name'     => 'adminPannel',
                'server_name'   => 'www.testounet.fr',
                'port'          => 80,
                'server_admin'  => 'karlito@martobre.fr',
                'docroot'       => '/etc/lamamos/admin_panel/',
                'docroot_owner' => 'www-data',
                'docroot_group' => 'www-data',
                'ssl'           => 0,
        });


	#install the admin pannel
	Service::lamadmin::define({

		'install_path' => '/etc/lamamos/admin_panel/',
	});

=cut


	#print $CFG::config{'OCFS2Init'};
	writeCfg('/etc/lamamos/lamamos.conf');

};




sub areTwoServConnectedToPacemaker {

        my $status1 = `crm node show | grep \"$CFG::config{'firstServHostName'}\" | cut --delimiter=":" -f2 | sed 's/ //g'`;
        my $status2 = `crm node show | grep \"$CFG::config{'SeconServHostName'}\" | cut --delimiter=":" -f2 | sed 's/ //g'`;

        if( ($status1 eq "normal\n") && ($status2 eq "normal\n") ){

                #the two servers are connected
		return TRUE;
        }else{

		return FALSE;
	}
}








sub installBaseSysteme {


	if($CFG::config{'OCFS2Init'} == "0"){

    firstPartInstall();
		$CFG::config{'OCFS2Init'} = "1";
  	writeCfg('/etc/lamamos/lamamos.conf');


    #put the nodes in standby mode (for reboot)
    `crm node standby serveur1`;
    `crm node standby serveur2`;
    `crm configure property maintenance-mode=true`;

    #ugly as hell, need to wait for the modifs in pacemaker to take effect
    sleep(10);

    `shutdown -r now`;

  }elsif($CFG::config{'OCFS2Init'} == "1"){

    secondPartInstall();
  }


}















sub firstPartInstall {

	#install drbd
  Service::drbd::define();



	#folder for the shared hard drives
  mkdir "/data",
    owner   => "root",
    group   => "root",
    mode    => 755;






	#pacemaker
	
  Service::pacemaker::define({

    'enable_secauth'        => 1,
    'authkey_path'                => '/etc/corosync/authkey',
    'bind_address'                => '192.168.56.0',
    'multicast_address'        => '226.99.5.1',
  });


  Service::pacemaker::service::define({

    'name'                => 'pacemaker',
    'version'        => '1',
  });

	#need to wait for the two servers to be connected
	while(!areTwoServConnectedToPacemaker()){

		#the two servers are connected
		print "We are waitting for the two servers to connect.\n";
		sleep(3);	
	}


  #we now define the first serveur as primari (needed for the first synchronisation)
  if($CFG::hostName eq $CFG::config{'firstServHostName'}){



    Service::pacemaker::property::define({

      'name' => 'no-quorum-policy',
      'value' => 'ignore',
    });

    Service::pacemaker::property::define({

      'name' => 'stonith-enabled',
      'value' => 'false',
    });

    Service::pacemaker::rsc_defaults::define({

      'name' => 'resource-stickiness',
      'value' => '100',
    });



    # primitive p_drbd_ocfs2 ocf:linbit:drbd params drbd_resource="r0"
    Service::pacemaker::primitive::define({

      'primitive_name' => 'p_drbd_ocfs2',
      'primitive_class' => 'ocf',
      'provided_by' => 'linbit',
      'primitive_type' => 'drbd',
      'parameters' => {'drbd_resource' => 'r0',},
    });

    # ms ms_drbd_ocfs2 p_drbd_ocfs2 meta master-max=2 clone-max=2 notify=true
    Service::pacemaker::master::define({

      'name' => 'ms_drbd_ocfs2',
      'primitive' => 'p_drbd_ocfs2',
      'meta' => {
        'master-max' => '2',
        'clone-max' => '2',
        'notify' => 'true',
      },
    });



    # primitive resDLM ocf:pacemaker:controld
    Service::pacemaker::primitive::define({

      'primitive_name' => 'resDLM',
      'primitive_class' => 'ocf',
      'provided_by' => 'pacemaker',
      'primitive_type' => 'controld',
    });

    # clone cloneDLM resDLM meta globally-unique="false" interleave="true"
    Service::pacemaker::clone::define({

      'name' => 'cloneDLM',
      'primitive' => 'resDLM',
      'meta' => {'globally-unique' => 'false', 'interleave' => 'true',},
    });

    # colocation colDLMDRBD inf: cloneDLM ms_drbd_ocfs2:Master
    Service::pacemaker::colocation::define({

      'name' => 'colDLMDRBD',
      'score' => 'INFINITY',
      'primitives' => ['cloneDLM', 'ms_drbd_ocfs2:Master'],
    });

    # order ordDRBDDLM inf: ms_drbd_ocfs2:promote cloneDLM
    Service::pacemaker::order::define({

      'name' => 'ordDRBDDLM',
      'score' => '0',
      'first' => 'ms_drbd_ocfs2:promote',
      'second' => 'cloneDLM',
    });




    # primitive resO2CB ocf:pacemaker:o2cb
    Service::pacemaker::primitive::define({

      'primitive_name' => 'resO2CB',
      'primitive_class' => 'ocf',
      'provided_by' => 'pacemaker',
      'primitive_type' => 'o2cb',
    });

    # clone cloneO2CB resO2CB meta globally-unique="false" interleave="true"
    Service::pacemaker::clone::define({

      'name' => 'cloneO2CB',
      'primitive' => 'resO2CB',
      'meta' => {'globally-unique' => 'false', 'interleave' => 'true',},
    });

    # colocation colO2CBDLM inf: cloneO2CB cloneDLM
    Service::pacemaker::colocation::define({

      'name' => 'colO2CBDLM',
      'score' => 'INFINITY',
      'primitives' => ['cloneO2CB', 'cloneDLM'],
    });

    # order ordDLMO2CB inf: cloneDLM cloneO2CB
    Service::pacemaker::order::define({

      'name' => 'ordDLMO2CB',
      'score' => '0',
      'first' => 'cloneDLM',
      'second' => 'cloneO2CB',
    });


	} #end of the if firstServer

}





sub secondPartInstall {

  `/etc/init.d/pacemaker start`;
  while(!isPacemakerRunning()){

		print("We are waitting for pacemakert to start\n");
    sleep(2);
  };

  #hugly as hell, we need to wait for pacemaker to finish to start
  sleep(15);

  if($CFG::hostName eq $CFG::config{'firstServHostName'}){

    #put the nodes in standby mode (for reboot)
    sleep(5);
    `crm node online serveur1`;
    sleep(5);
    `crm node online serveur2`;
    sleep(5);
    `crm configure property maintenance-mode=false`;


    #need to wait for drbd to be launched
    #ugly as hell, but should be fine for now (to wait for drbd to start)
    sleep(10);

    `drbdadm primary all`;

    `tunefs.ocfs2 --yes --update-cluster-stack /dev/drbd0`;


=pod
    #ajout du montage du filse systeme.
    # primitive p_fs_ocfs2 ocf:heartbeat:Filesystem params device="/dev/drbd0" directory="/data" fstype="ocfs2" options="rw,noatime"
    Service::pacemaker::primitive::define({

      'primitive_name' => 'p_fs_ocfs2',
      'primitive_class' => 'ocf',
      'provided_by' => 'heartbeat',
      'primitive_type' => 'Filesystem',
      'parameters' => {'device' => '/dev/drbd0', 'directory' => '/data', 'fstype' => 'ocfs2', 'options' => 'rw,noatime',},
    });

    # clone cl_fs_ocfs2 p_fs_ocfs2
    Service::pacemaker::clone::define({

      'name' => 'cl_fs_ocfs2',
      'primitive' => 'p_fs_ocfs2',
    });

    # colocation c_ocfs2 inf: cl_fs_ocfs2 cloneO2CB
    Service::pacemaker::colocation::define({

      'name' => 'c_ocfs2',
      'score' => 'INFINITY',
      'primitives' => ['cl_fs_ocfs2', 'cloneO2CB'],
    });

    # order o_ocfs2 inf: cloneO2CB cl_fs_ocfs2:start
    Service::pacemaker::order::define({

      'name' => 'o_ocfs2',
      'score' => 'INFINITY',
      'first' => 'cloneO2CB',
      'second' => 'cl_fs_ocfs2:start',
    });
=cut

  }

  #(need to change the split brain management)
  #mount -t ocfs2 /dev/drbd0 /data

}








sub isPacemakerRunning {

  my $status = `/etc/init.d/drbd status | grep \"is running...\" | wc -l`;

  if($status eq "0"){

    return FALSE;
  }else{

    return TRUE;
  }
}



task "reboot", group => martobre, sub{



  rex-reboot;


}









